version: '3.8'

# Base configuration for n8n services
x-n8n-common: &n8n-common
  image: n8nio/n8n:latest
  restart: unless-stopped
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=${COOLIFY_DATABASE_HOST:-postgres}
    - DB_POSTGRESDB_PORT=${COOLIFY_DATABASE_PORT:-5432}
    - DB_POSTGRESDB_DATABASE=${COOLIFY_DATABASE_NAME:-n8n}
    - DB_POSTGRESDB_USER=${COOLIFY_DATABASE_USER:-n8n}
    - DB_POSTGRESDB_PASSWORD=${COOLIFY_DATABASE_PASSWORD:-change_me_please}
    - N8N_PROTOCOL=${COOLIFY_N8N_PROTOCOL:-https}
    - N8N_PORT=${COOLIFY_N8N_PORT:-5678}
    - N8N_HOST=${COOLIFY_FQDN}
    - N8N_ENCRYPTION_KEY=${COOLIFY_N8N_ENCRYPTION_KEY:-your_very_secure_encryption_key}
    - N8N_USER_MANAGEMENT_JWT_SECRET=${COOLIFY_N8N_JWT_SECRET:-another_very_secure_jwt_secret}
    - EXECUTIONS_MODE=queue
    - QUEUE_BULL_REDIS_HOST=${COOLIFY_REDIS_HOST:-redis}
    - QUEUE_BULL_REDIS_PORT=${COOLIFY_REDIS_PORT:-6379}
    - QUEUE_BULL_REDIS_PASSWORD=${COOLIFY_REDIS_PASSWORD:-change_me_also_please}
    - N8N_LOG_LEVEL=${COOLIFY_N8N_LOG_LEVEL:-INFO}
    - GENERIC_TIMEZONE=${COOLIFY_TIMEZONE:-UTC}
    - TZ=${COOLIFY_TIMEZONE:-UTC}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
  volumes:
    - ${COOLIFY_VOLUME_N8N}:/home/node/.n8n

# Coolify automatically assigns ports, networks, and creates volumes
services:
  postgres:
    image: postgres:14-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${COOLIFY_DATABASE_USER:-n8n}
      - POSTGRES_PASSWORD=${COOLIFY_DATABASE_PASSWORD:-change_me_please}
      - POSTGRES_DB=${COOLIFY_DATABASE_NAME:-n8n}
    volumes:
      - ${COOLIFY_VOLUME_POSTGRES}:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${COOLIFY_DATABASE_USER:-n8n} -d ${COOLIFY_DATABASE_NAME:-n8n}"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      # Internal service that shouldn't be directly exposed
      - coolify.exposure=internal

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --requirepass ${COOLIFY_REDIS_PASSWORD:-change_me_also_please}
    volumes:
      - ${COOLIFY_VOLUME_REDIS}:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${COOLIFY_REDIS_PASSWORD:-change_me_also_please}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      # Internal service that shouldn't be directly exposed
      - coolify.exposure=internal

  n8n-primary:
    <<: *n8n-common
    environment:
      - N8N_DISABLE_PRODUCTION_MAIN_PROCESS=true
      - WEBHOOK_URL=https://${COOLIFY_FQDN}/webhook
      - N8N_EDITOR_BASE_URL=https://${COOLIFY_FQDN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
      # Main service that will be exposed to the internet
      - coolify.exposure=public
      - coolify.health-path=/
      - coolify.health-port=${COOLIFY_N8N_PORT:-5678}
      # Path routing for Coolify's proxy (Caddy)
      - coolify.route=/*
      - coolify.path-routing=true

  n8n-worker:
    <<: *n8n-common
    command: n8n worker
    depends_on:
      - n8n-primary
      - redis
    labels:
      # Workers don't need to be exposed
      - coolify.exposure=internal

  n8n-webhook:
    <<: *n8n-common
    command: n8n webhook
    depends_on:
      - n8n-primary
      - redis
    labels:
      # Webhook processor needs to be exposed but only certain paths
      - coolify.exposure=public
      - coolify.health-path=/
      - coolify.health-port=${COOLIFY_N8N_PORT:-5678}
      # Path routing for Coolify's proxy (Caddy)
      - coolify.route=/webhook*
      - coolify.path-routing=true

# These metadata tags help Coolify understand the service better
# documentation: https://docs.n8n.io/
# slogan: Extendable workflow automation tool with webhook processors
# tags: automation,workflow,webhooks,integration
# port: 5678
